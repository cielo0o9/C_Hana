> SEO(Search Engine Optimization)
  - 웹 페이지가 검색엔진에서 잘 노출되도록 최적화하는 기술
  - <meta>: Meta Tag를 활용해 페이지의 설명, 키워드, 작성자 등의 정보를 제공 가능

> 반응형 / 적응형
    - 레이아웃: 웹이나 앱에서 콘텐츠와 요소들이 화면상에서 어떻게 배치될지를 정의하는 방식식
    - 반응형(유동적): 하나의 웹 페이지가 다양한 화면 크기에서 자동으로 조절되도록 만드는 방법
      + 즉, 디바이스나 화면 크기에 관계없이 동일한 HTML과 CSS를 사용하면서 웹 페이지가 유동적으로 변화하도록 설계하는 것 
    - 적응형(고정적): 사용자의 디바이스와 화면 크기에 맞춰 다양한 고정된 레이아웃을 제공하는 방식
      + 즉, 특정 화면의 크기나 디바이스 유형에 맞는 레이아웃을 미리 설계해두고, 해당 디바이스에 맞춰 적합한 고정 레이아웃을 제공

> 웹 접근성
  - 웹 사이트를 만들 때 이 웹 사이트를 누구나 쉽게 이용할 수 있을까? 를 고민하는 것이 웹 개발자의 기본 자세
  - 웹 접근성의 핵심: 시각, 청각, 신체적 장애가 있거나, 나이가 많거나, 인터넷 속도가 느린 환경에서도 모든 사람이 웹 사이트를 이용할 수 있도록 보장하는 것
  - 웹 접근성을 높이면 더 많은 사람이 편리하게 웹사이트를 이용할 수 있고, 이는 사회적 평등과도 연결되는 문제
  - 시각 장애인
    + 시맨틱 태그 활용: <div> 대신 <header>, <main>, <footer> 등 의미 있는 태그를 사용하여 스크린 리더가 문서를 읽을 때 논리적인 순서로 읽을 수 있도록 해야 함
    + Alternative Text 제공: 이미지에는 반드시 alt 속성을 추가해야 하며 의미있는 설명을 제공해야 함
    + 색상 구별이 어려운 사람들을 위해 색깔만으로 중요한 정보를 전달하지 않도록 해야함
    + 색상 대비 준수: 텍스트와 배경색의 대비(명암비)가 너무 낮으면 색약이나 저시력자가 읽기 어려움. WCAG기준으로 명암비 4.5:1 이상을 권장
  - 청각 장애인
    + 동영상에 자막 제공: 청각 장애인, 소음이 심한 환경에서 영상을 보는 사람을 위해 자막을 제공해야 함.
    + 경고음이나 효과음만으로 중요한 정보를 전달하지 않도록 해야함
  - 신체적 장애인
    + tab 키로 모든 버튼과 링크 이동이 가능해야 함
    + 버튼 크기나 클릭 영역이 충분히 커야 함
  - 인지 및 학습 장애가 있는 사람
    + focus 스타일을 적용하여 현재 초점이 어디에 있는지 쉽게 알 수 있도록 해야 함.
    + 너무 복잡한 구조나 어려운 용어 사용을 피해야 함.
    + 중요한 정보는 간결하고 명확하게 제공해야 함.
  - 기술적 제한이 있는 사용자
    + 저사양 기기, 저속 인터넷 환경에서도 웹사이트가 원활하게 작동해야 함.
    + 과도한 이미지나 애니메이션으로 인해 로딩이 느려지면 안 됨.
  - 웹 접근성을 높이는 방법

> 웹 개발 트렌드
  1. AI 및 자동화 기술 활용 증가 
    - AI 기반 웹 개발: Chat GPT, Copilot 같은 AI가 코드 자동 완성, 디버깅, 문서화 작업을 돕고 있음
    - AI 챗봇 및 추천 시스템: 사용자 맞춤형 경험 제공을 위해 AI 도입이 증가
    - 자동 코드 생성 도구: webflow, framer AI 같은 no-code / low-code 플랫폼이 AI와 결합되어 더욱 발전 중
  2. no-code / low-code 플랫폼 확산
    - no-code: 프로그래민 없이 웹사이트, 앱, 데이터베이스 등을 만들 수 있는 개발 방식
    - low-code: 개발자의 코드 작성량을 최소화하면서도 프로그래밍이 필요한 방식
    - webflow, framer, bubble: 개발 없이도 직관적인 UI를 만들 수 있는 도구들 인기
    - 기업용 Low-Code 플랫폼: 내부 시스템 구축을 위해 retool, outsystem 같은 솔루션 활용 증가 
    - 전통적 개발과의 결합: 완전한 no-code가 아닌, 커스텀 코드와 혼합된 Hybrid 개발 방식이 떠오름
  3. Javascript 프레임워크의 변화
    - React, Vue, Svelte 지속 성장: Next.js, Nuxt.js 등 SSR(서버사이드 렌더링) 지원 프레임워크도 인기가 많음
      + SSR(Server-Side Rendering): 웹 페이지의 HTML을 서버에서 미리 렌더링하여 클라이언트(브라우저)로 보내는 방식 > 서버 부하가 증가하고 페이지 전환 속도가 저하된다는 단점이 있음 
    - Qwik, Solid.js 같은 신흥 프레임워크 등장: 빠른 성능과 최적화를 중점으로 하는 새로운 JS 프레임워크들이 연구됨
    - Micro Frontend 아키텍처: 대규모 프로젝트에서 모듈 단위 개발이 가능하도록 변화 중
  4. 서버리스(Serverless) & 백엔드 트렌드
    - Vercel, Netify, AWS Lambda 같은 서버리스 아케텍처 인기: 개발자가 직접 서버를 관리하지 않고, 배포 및 확장성을 쉽게 할 수 있음
    - Headless CMS: 프론트엔드와 백엔드를 분리하여 유연한 콘텐츠 관리 가능
    - Jamstack 아키텍처 확산: 정적인 웹사이트에 API 및 동적 기능을 추가하는 방식이 인기
  5. 웹 성능 최적화 및 친환경 웹 개발
    - 웹사이트 속도 최적화 중요성 증가: 구글 Core Web Vitals를 기준으로 성능 최적화 필수
    - 프레임워크 최적화: React Server Components, Suspense, Lazy Loading 기술 적용 확대
    - 탄소 발자국 줄이기: 친환경적인 웹 개발을 위해 경량화된 웹사이트, 효율적인 서버 운영 등이 주목받음
  6. 보안 & 개인정보 보호 강화
    - 브라우저 쿠키 규제 강화

> 알고리즘
  - 특정 문제를 해결하기 위한 일련의 절차나 규칙
  - 입력을 받아 원하는 출력을 얻기 위해 순차적으로 실행해야 할 단계

> 자료구조
  - 데이터를 효율적으로 저장하고 관리하는 방식을 의미
  - 데이터를 저장하고 조작하는 방법을 설계하는 개념
  - 종류
    + 선형 구조
      1. 배열(Array): 같은 자료형의 데이터를 연속적으로 저장
      2. 연결 리스트(linked List): 데이터와 포인터를 함께 저장하는 구조
      3. 스택(stack): LIFO(Last in First out) 구조
      4. 큐(Queue): FIFO(First in First out) 구조
      5. 덱(Deque): 앞, 뒤에서 삽입/삭제 가능
    + 비선형 구조
      1. 트리(Tree): 계층적 구조
      2. 그래프(Graph): 정점과 간선으로 연결된 구조
      3. 해시 테이블(Hash Table): 키(key)와 값(Value)으로 데이터를 저장하는 구조

> 빅오 표기법
  - 알고리즘의 시간 및 공간 복잡도를 표현하는 방법

> 모듈화
  : 프로그램을 여러 개의 독립적인 모듈로 나누어 개발하고 관리하는 개념
  - 모듈화의 주요 특징
    + 독립성: 각 모듕이 독립적으로 동작할 수 있음
    + 재사용성: 여러 프로젝트에서 동일한 모듈을 활용 가능
    + 캡슐화: 내부 구현을 숨기고 필요한 기능만 외부에 제공
    + 확장성: 새로운 기능을 추가하거나 변경하기 쉬움
    + 협업 용이성: 여러 개발자가 동시에 작업 가능
  - 모듈화의 종류
    + 기능별 모듈화: 특정 기능을 수행하는 모듈(ex. 로그인, 결제, API 요청)
    + 컴포넌트 모듈화: UI를 구성하는 요소를 모듈로 분리(ex. 버튼, 카드, 입력창)
    + 데이터 모듈화: 데이터베이스 및 상태 관리를 위한 모듈(ex. Redux, Zustand)
    + 라우팅 모듈화: URL 경로를 별도 파일로 관리(ex. React Router, Express Router)
